deb@deb-Inspiron-5567:~$ sudo service postgresql stop
sudo sh -c "echo 3 > /proc/sys/vm/drop_caches"
sudo service postgresql start
sudo -u postgres psql -d dojo
[sudo] password for deb:
could not change directory to "/home/deb": Permission denied
psql (14.9 (Ubuntu 14.9-0ubuntu0.22.04.1))
Type "help" for help.

dojo=# EXPLAIN ANALYZE SELECT e.nome, e.dep_id, e.salario, AVG(e.salario)
OVER (PARTITION BY e.dep_id) AS media_salario_departamento
FROM empregados e
JOIN (SELECT dep_id, AVG(salario) AS media_salario
FROM empregados GROUP BY dep_id) AS t
ON e.dep_id = t.dep_id
WHERE e.salario >= t.media_salario;
                                                              QUERY PLAN
--------------------------------------------------------------------------------------------------------------------------------------
 WindowAgg  (cost=6.73..7.31 rows=33 width=47) (actual time=28.795..28.844 rows=47 loops=1)
   ->  Sort  (cost=6.73..6.81 rows=33 width=15) (actual time=28.777..28.782 rows=47 loops=1)
         Sort Key: e.dep_id
         Sort Method: quicksort  Memory: 27kB
         ->  Hash Join  (cost=3.62..5.90 rows=33 width=15) (actual time=18.685..18.719 rows=47 loops=1)
               Hash Cond: (e.dep_id = empregados.dep_id)
               Join Filter: ((e.salario)::numeric >= (avg(empregados.salario)))
               Rows Removed by Join Filter: 53
               ->  Seq Scan on empregados e  (cost=0.00..2.00 rows=100 width=15) (actual time=3.995..4.001 rows=100 loops=1)
               ->  Hash  (cost=3.22..3.22 rows=32 width=36) (actual time=14.664..14.665 rows=32 loops=1)
                     Buckets: 1024  Batches: 1  Memory Usage: 10kB
                     ->  HashAggregate  (cost=2.50..2.90 rows=32 width=36) (actual time=14.641..14.654 rows=32 loops=1)
                           Group Key: empregados.dep_id
                           Batches: 1  Memory Usage: 24kB
                           ->  Seq Scan on empregados  (cost=0.00..2.00 rows=100 width=8) (actual time=0.013..0.021 rows=100 loops=1)
 Planning Time: 230.301 ms
 Execution Time: 38.276 ms
(17 rows)

dojo=# EXPLAIN ANALYZE SELECT e.nome, e.dep_id, e.salario, AVG(e.salario)
OVER (PARTITION BY e.dep_id) AS media_salario_departamento
FROM empregados e
JOIN (SELECT dep_id, AVG(salario) AS media_salario
FROM empregados GROUP BY dep_id) AS t
ON e.dep_id = t.dep_id
WHERE e.salario >= t.media_salario;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 WindowAgg  (cost=6.73..7.31 rows=33 width=47) (actual time=0.149..0.183 rows=47 loops=1)
   ->  Sort  (cost=6.73..6.81 rows=33 width=15) (actual time=0.141..0.144 rows=47 loops=1)
         Sort Key: e.dep_id
         Sort Method: quicksort  Memory: 27kB
         ->  Hash Join  (cost=3.62..5.90 rows=33 width=15) (actual time=0.096..0.128 rows=47 loops=1)
               Hash Cond: (e.dep_id = empregados.dep_id)
               Join Filter: ((e.salario)::numeric >= (avg(empregados.salario)))
               Rows Removed by Join Filter: 53
               ->  Seq Scan on empregados e  (cost=0.00..2.00 rows=100 width=15) (actual time=0.024..0.029 rows=100 loops=1)
               ->  Hash  (cost=3.22..3.22 rows=32 width=36) (actual time=0.060..0.060 rows=32 loops=1)
                     Buckets: 1024  Batches: 1  Memory Usage: 10kB
                     ->  HashAggregate  (cost=2.50..2.90 rows=32 width=36) (actual time=0.038..0.050 rows=32 loops=1)
                           Group Key: empregados.dep_id
                           Batches: 1  Memory Usage: 24kB
                           ->  Seq Scan on empregados  (cost=0.00..2.00 rows=100 width=8) (actual time=0.003..0.008 rows=100 loops=1)
 Planning Time: 0.168 ms
 Execution Time: 0.240 ms
(17 rows)

dojo=# EXPLAIN ANALYZE SELECT e.nome, e.dep_id, e.salario, AVG(e.salario)
OVER (PARTITION BY e.dep_id) AS media_salario_departamento
FROM empregados e
JOIN (SELECT dep_id, AVG(salario) AS media_salario
FROM empregados GROUP BY dep_id) AS t
ON e.dep_id = t.dep_id
WHERE e.salario >= t.media_salario;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 WindowAgg  (cost=6.73..7.31 rows=33 width=47) (actual time=0.245..0.308 rows=47 loops=1)
   ->  Sort  (cost=6.73..6.81 rows=33 width=15) (actual time=0.225..0.242 rows=47 loops=1)
         Sort Key: e.dep_id
         Sort Method: quicksort  Memory: 27kB
         ->  Hash Join  (cost=3.62..5.90 rows=33 width=15) (actual time=0.116..0.206 rows=47 loops=1)
               Hash Cond: (e.dep_id = empregados.dep_id)
               Join Filter: ((e.salario)::numeric >= (avg(empregados.salario)))
               Rows Removed by Join Filter: 53
               ->  Seq Scan on empregados e  (cost=0.00..2.00 rows=100 width=15) (actual time=0.008..0.019 rows=100 loops=1)
               ->  Hash  (cost=3.22..3.22 rows=32 width=36) (actual time=0.100..0.101 rows=32 loops=1)
                     Buckets: 1024  Batches: 1  Memory Usage: 10kB
                     ->  HashAggregate  (cost=2.50..2.90 rows=32 width=36) (actual time=0.071..0.091 rows=32 loops=1)
                           Group Key: empregados.dep_id
                           Batches: 1  Memory Usage: 24kB
                           ->  Seq Scan on empregados  (cost=0.00..2.00 rows=100 width=8) (actual time=0.004..0.015 rows=100 loops=1)
 Planning Time: 0.160 ms
 Execution Time: 0.359 ms
(17 rows)

dojo=# EXPLAIN ANALYZE SELECT e.nome, e.dep_id, e.salario, AVG(e.salario)
OVER (PARTITION BY e.dep_id) AS media_salario_departamento
FROM empregados e
JOIN (SELECT dep_id, AVG(salario) AS media_salario
FROM empregados GROUP BY dep_id) AS t
ON e.dep_id = t.dep_id
WHERE e.salario >= t.media_salario;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 WindowAgg  (cost=6.73..7.31 rows=33 width=47) (actual time=0.221..0.290 rows=47 loops=1)
   ->  Sort  (cost=6.73..6.81 rows=33 width=15) (actual time=0.213..0.219 rows=47 loops=1)
         Sort Key: e.dep_id
         Sort Method: quicksort  Memory: 27kB
         ->  Hash Join  (cost=3.62..5.90 rows=33 width=15) (actual time=0.118..0.195 rows=47 loops=1)
               Hash Cond: (e.dep_id = empregados.dep_id)
               Join Filter: ((e.salario)::numeric >= (avg(empregados.salario)))
               Rows Removed by Join Filter: 53
               ->  Seq Scan on empregados e  (cost=0.00..2.00 rows=100 width=15) (actual time=0.008..0.020 rows=100 loops=1)
               ->  Hash  (cost=3.22..3.22 rows=32 width=36) (actual time=0.097..0.097 rows=32 loops=1)
                     Buckets: 1024  Batches: 1  Memory Usage: 10kB
                     ->  HashAggregate  (cost=2.50..2.90 rows=32 width=36) (actual time=0.065..0.087 rows=32 loops=1)
                           Group Key: empregados.dep_id
                           Batches: 1  Memory Usage: 24kB
                           ->  Seq Scan on empregados  (cost=0.00..2.00 rows=100 width=8) (actual time=0.003..0.014 rows=100 loops=1)
 Planning Time: 0.158 ms
 Execution Time: 0.344 ms
(17 rows)

dojo=# EXPLAIN ANALYZE SELECT e.nome, e.dep_id, e.salario, AVG(e.salario)
OVER (PARTITION BY e.dep_id) AS media_salario_departamento
FROM empregados e
JOIN (SELECT dep_id, AVG(salario) AS media_salario
FROM empregados GROUP BY dep_id) AS t
ON e.dep_id = t.dep_id
WHERE e.salario >= t.media_salario;
                                                              QUERY PLAN
--------------------------------------------------------------------------------------------------------------------------------------
 WindowAgg  (cost=6.73..7.31 rows=33 width=47) (actual time=0.111..0.144 rows=47 loops=1)
   ->  Sort  (cost=6.73..6.81 rows=33 width=15) (actual time=0.106..0.109 rows=47 loops=1)
         Sort Key: e.dep_id
         Sort Method: quicksort  Memory: 27kB
         ->  Hash Join  (cost=3.62..5.90 rows=33 width=15) (actual time=0.064..0.096 rows=47 loops=1)
               Hash Cond: (e.dep_id = empregados.dep_id)
               Join Filter: ((e.salario)::numeric >= (avg(empregados.salario)))
               Rows Removed by Join Filter: 53
               ->  Seq Scan on empregados e  (cost=0.00..2.00 rows=100 width=15) (actual time=0.007..0.012 rows=100 loops=1)
               ->  Hash  (cost=3.22..3.22 rows=32 width=36) (actual time=0.050..0.051 rows=32 loops=1)
                     Buckets: 1024  Batches: 1  Memory Usage: 10kB
                     ->  HashAggregate  (cost=2.50..2.90 rows=32 width=36) (actual time=0.033..0.045 rows=32 loops=1)
                           Group Key: empregados.dep_id
                           Batches: 1  Memory Usage: 24kB
                           ->  Seq Scan on empregados  (cost=0.00..2.00 rows=100 width=8) (actual time=0.002..0.007 rows=100 loops=1)
 Planning Time: 0.111 ms
 Execution Time: 0.185 ms
(17 rows)
